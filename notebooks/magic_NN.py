# -*- coding: utf-8 -*-
"""Training_model_doscientoscincuentayseis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sFg6RR9URcYAXcO0LLalR2nh7pQOPyxO
"""

from google.colab import drive
drive.mount('/content/drive')

import keras as tf
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from keras.utils import to_categorical
from keras.preprocessing.image import ImageDataGenerator
from keras.layers.core import Activation, Flatten, Dropout, Dense
from keras.layers.normalization import BatchNormalization
from keras.optimizers import Adam
from keras.callbacks import ModelCheckpoint
from sklearn.metrics import confusion_matrix
from keras.models import model_from_json
from sklearn import preprocessing
import seaborn as sns
import pandas as pd
import numpy as np
import re
import glob
import cv2
import matplotlib.pyplot as plt
import PIL
from PIL import Image
import pickle
import json
import time
from os import listdir

#/content/drive/My Drive/Training_model_cientoveintiocho.ipynb
!unzip ../Final-photos-doscientoscincuentayseis.zip

pwd

classes = {"/Amanita-cesarea/" : 0,
           "/Amanita-muscaria/" : 1,
           "/Amanita-phalloides/" : 2,
           "/Boletus-edulis/" : 3,
           "/Lactarius-deliciosus/" : 4
            }
def get_y(name):
    lista = []
    for file in glob.glob('/content/drive/My Drive/Photos-doscientoscincuentayseis/Final-photos-doscientoscincuentayseis/*/*'):
        x = re.findall(f"{name}",file)
        for k,v in classes.items():
            if k in x:
                lista.append(v)
    return np.asarray(lista)

lst = []
for e in classes:
    lst.append(get_y(e))
y = np.concatenate((lst[0],lst[1],lst[2],lst[3],lst[4]),axis=0)

y.shape

len(y)

y = tf.utils.to_categorical(
    y,
    num_classes=5,
    dtype='float32'
)

y.shape

y

im = []
for file in glob.glob('/content/drive/My Drive/Photos-doscientoscincuentayseis/Final-photos-doscientoscincuentayseis/*/*'):
    im.append(cv2.imread(file) / 255)

X = np.asarray(im)

X.shape

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 42)

num_classes = 5
img_rows, img_cols, img_colors = 256, 256, 3
input_shape = (img_rows, img_cols, img_colors)
print(X_train.shape,X_test.shape,y_train.shape,y_test.shape)

batch_size = 20
epochs = 100

aug = ImageDataGenerator(
    rotation_range=25, width_shift_range=0.1,
    height_shift_range=0.1, shear_range=0.2, 
    zoom_range=0.2,horizontal_flip=True, 
    fill_mode="nearest")

model = Sequential()
chanDim = -1
if K.image_data_format() == "channels_first":
    chanDim = 1
model.add(Conv2D(32, (3, 3), padding="same",input_shape=input_shape))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(MaxPooling2D(pool_size=(3, 3)))
model.add(Dropout(0.25))
model.add(Conv2D(64, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(Conv2D(64, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Conv2D(128, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(Conv2D(128, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(1024))
model.add(Activation("relu"))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation("softmax"))
model.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.Adadelta(), metrics=["accuracy"])

filepath='Checkpoint_{epoch:02d}_{val_acc:.2f}'
checkpoint = ModelCheckpoint(filepath, monitor='val_acc', verbose=1, save_best_only=True, mode='max')
callbacks_list = [checkpoint]

history = model.fit_generator(
    aug.flow(X_train, y_train, batch_size),
    validation_data=(X_test, y_test),
    steps_per_epoch=X_train.shape[0],
    epochs=epochs, verbose=1,
    callbacks=callbacks_list
    )

acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(1, len(acc) + 1)
#Train and validation accuracy
plt.plot(epochs, acc, 'b', label='Training accurarcy')
plt.plot(epochs, val_acc, 'r', label='Validation accurarcy')
plt.title('Training and Validation accurarcy')
plt.legend()

plt.figure()
#Train and validation loss
plt.plot(epochs, loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and Validation loss')
plt.legend()
plt.show()

print("[INFO] Calculating model accuracy")
scores = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {scores[1]*100}")

moment=time.localtime()
name='Model_{}_{}-{}-{}.h5'.format(model.history.history["val_acc"][-1],moment[2],moment[3],moment[4])
model.save(name)

model_json = model.to_json()
with open(name+'.json', "w") as json_file:
    json.dump(model_json, json_file)

model.save_weights(name)

#print("Saving model...")
#pickle.dump(model,open('cnn_model.pkl', 'wb'))

Y_pred = model.predict(X_test)
# Convert predictions classes to one hot vectors 
Y_pred_classes = np.argmax(Y_pred,axis = 1) 
# Convert validation observations to one hot vectors
print(Y_pred_classes)
Y_true = np.argmax(y_test,axis = 1)
print(Y_true)
# compute the confusion matrix
cm = confusion_matrix(Y_true, Y_pred_classes)
cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
# plot the confusion matrix
f,ax = plt.subplots(figsize=(8, 8))
sns.heatmap(cm, annot=True, linewidths=0.01,cmap="Greens",linecolor="gray", fmt= '.1f',ax=ax)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()



# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
img = Image.open("/content/drive/My Drive/Test-photos/4output_screenshot_15.12.2019.png")
img = img.resize(size=(256,256))
img

pred = model.predict(np.expand_dims(img,axis=0))[0]
print("Probs -> Amanita-cesarea:{0:.5f} Amanita-muscaria:{1:.5f} Amanita-phalloides:{2:.5f} Boletus-edulis:{3:.5f} Niscalo:{4:.5f}".format(pred[0],pred[1],pred[2],pred[3],pred[4]))



